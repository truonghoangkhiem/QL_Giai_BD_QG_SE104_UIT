openapi: 3.0.4
info:
  title: National Football League Management API
  description: |-
    This is an API for managing a national football league, built on the OpenAPI 3.0 specification. It provides endpoints for managing team information, players, match schedules, results, and league standings.  
    Learn more about OpenAPI at [https://swagger.io](https://swagger.io). We follow a design-first approach, allowing you to contribute to improving the API, from its definition to its code.  
    Some useful links:  
    - [National Football League API Repository](https://github.com/truonghoangkhiem/QL_Giai_BD_QG_SE104_UIT.git)
  termsOfService: https://swagger.io/terms/
  contact:
    email: truongkhiemhoang@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12
externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io
servers:
  - url: http://localhost:5000
tags:
  - name: users
    description: API concern about users
  - name: regulations
    description: API concern about regulations
  - name: teams
    description: API concern about teams
  - name: team_results
    description: API concern about team results
  - name: ranking
    description: API concern about ranking
  - name: seasons
    description: API concern about seasons
  - name: matches
    description: API concern about matches
  - name: players
    description: API concern about players
  - name: playerresults
    description: API concern about player results
  - name: playerranking
    description: API concern about player ranking
paths:
  /api/auth/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: Logs user into the system
      operationId: loginUser
      requestBody:
        description: Information needed to login
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Invalid input (validation error)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Invalid email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/register:
    post:
      tags:
        - users
      summary: Registers a new user
      description: Creates a new user account in the system
      operationId: registerUser
      requestBody:
        description: Information needed to register a new user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        "400":
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/password:
    put:
      tags:
        - users
      summary: Updates user password
      description: Updates the password for an existing user
      operationId: updatePasswordUser
      requestBody:
        description: Information needed to update the password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input (validation error)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Invalid old password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/username:
    put:
      tags:
        - users
      summary: Updates user username
      description: Updates the username for an existing user
      operationId: updateUsername
      requestBody:
        description: Information needed to update the username
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUsernameRequest"
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input (validation error)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/auth/:
    delete:
      tags:
        - users
      summary: Deletes a user
      description: Deletes an existing user from the system
      operationId: deleteUser
      requestBody:
        description: Information needed to delete a user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteUserRequest"
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input (validation error)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/regulations/:
    get:
      tags:
        - regulations
      summary: Get all regulations
      description: Retrieves a list of all regulations
      operationId: getRegulations
      responses:
        "200":
          description: Regulations fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegulationsResponse"
    post:
      tags:
        - regulations
      summary: Create a new regulation
      description: Creates a new regulation for a season
      operationId: createRegulation
      security:
        - bearerAuth: []
      requestBody:
        description: Information needed to create a regulation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRegulationRequest"
      responses:
        "201":
          description: Regulation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input, missing field, invalid rules, or regulation already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/regulations/{id}:
    get:
      tags:
        - regulations
      summary: Get a regulation by ID
      description: Retrieves a regulation by its ID
      operationId: getRegulationById
      parameters:
        - $ref: "#/components/parameters/RegulationId"
      responses:
        "200":
          description: Regulation found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegulationResponse"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Regulation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - regulations
      summary: Update a regulation
      description: Updates the rules of an existing regulation
      operationId: updateRegulation
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/RegulationId"
      requestBody:
        description: Information needed to update the regulation
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRegulationRequest"
      responses:
        "200":
          description: Regulation updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid ID format or invalid rules
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Regulation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - regulations
      summary: Delete a regulation
      description: Deletes an existing regulation by its ID
      operationId: deleteRegulation
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/RegulationId"
      responses:
        "200":
          description: Regulation deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Regulation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/regulations/{season_id}/{regulation_name}:
    get:
      tags:
        - regulations
      summary: Get regulation ID by season and name
      description: Retrieves the ID of a regulation by season ID and regulation name
      operationId: getIdRegulations
      parameters:
        - $ref: "#/components/parameters/SeasonId"
        - $ref: "#/components/parameters/RegulationName"
      responses:
        "200":
          description: Regulation ID found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegulationIdResponse"
        "400":
          description: Invalid season_id or regulation_name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Regulation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/teams/{season_id}/{team_name}:
    get:
      tags:
        - teams
      summary: Get a team by season ID and team name
      description: Retrieves a team based on the season ID and team name
      operationId: getTeamsByNameAndSeasonId
      parameters:
        - $ref: "#/components/parameters/SeasonId"
        - $ref: "#/components/parameters/TeamName"
      responses:
        "200":
          description: Team fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponse"
        "400":
          description: Invalid season ID or team name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/teams/:
    get:
      tags:
        - teams
      summary: Get all teams
      description: Retrieves a list of all teams
      operationId: getTeams
      responses:
        "200":
          description: Teams fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamsResponse"
    post:
      tags:
        - teams
      summary: Create a new team
      description: Creates a new team for a season
      operationId: createTeam
      security:
        - bearerAuth: []
      requestBody:
        description: Information needed to create a team
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamRequest"
      responses:
        "201":
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTeamResponse"
        "400":
          description: Invalid input or team name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Season not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/teams/{id}:
    get:
      tags:
        - teams
      summary: Get a team by ID
      description: Retrieves a team by its ID
      operationId: getTeamsByID
      parameters:
        - $ref: "#/components/parameters/TeamId"
      responses:
        "200":
          description: Team found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResponse"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - teams
      summary: Update a team
      description: Updates an existing team
      operationId: updateTeam
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/TeamId"
      requestBody:
        description: Information needed to update the team
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTeamRequest"
      responses:
        "200":
          description: Team updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input, team name already exists, or no changes made
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - teams
      summary: Delete a team
      description: Deletes an existing team by its ID
      operationId: deleteTeam
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/TeamId"
      responses:
        "204":
          description: Team deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/teams/seasons/{season_id}:
    get:
      tags:
        - teams
      summary: Get teams by season ID
      description: Retrieves all teams for a specific season
      operationId: getTeamsByIDSeason
      parameters:
        - $ref: "#/components/parameters/SeasonId"
      responses:
        "200":
          description: Teams fetched successfully for this season
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamsResponse"
        "400":
          description: Invalid season ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Season not found or no teams found for this season
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/matches/:
    get:
      tags:
        - matches
      summary: Get all matches
      description: Retrieves a list of all matches
      operationId: getMatches
      responses:
        "200":
          description: Matches fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchesResponse"
    post:
      tags:
        - matches
      summary: Create match schedule
      description: Creates a match schedule for a season
      operationId: createMatch
      security:
        - bearerAuth: []
      requestBody:
        description: Information needed to create a match schedule
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateMatchRequest"
      responses:
        "201":
          description: Match schedule created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input, not enough teams, or not enough time for match
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Season not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/matches/{id}:
    get:
      tags:
        - matches
      summary: Get a match by ID
      description: Retrieves a match by its ID
      operationId: getMatchesById
      parameters:
        - $ref: "#/components/parameters/MatchId"
      responses:
        "200":
          description: Match found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchResponse"
        "404":
          description: Match not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - matches
      summary: Update a match
      description: Updates an existing match
      operationId: updateMatch
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/MatchId"
      requestBody:
        description: Information needed to update the match
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateMatchRequest"
      responses:
        "200":
          description: Match updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input, goal minute exceeds regulation limit, or invalid goal type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Match not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - matches
      summary: Delete a match
      description: Deletes an existing match by its ID
      operationId: deleteMatch
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/MatchId"
      responses:
        "204":
          description: Match deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Match not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/matches/teams/{team_id}:
    get:
      tags:
        - matches
      summary: Get matches by team ID
      description: Retrieves all matches where the provided team ID is either team1 or team2
      operationId: getMatchesByTeamId
      parameters:
        - $ref: "#/components/parameters/TeamId"
      responses:
        "200":
          description: Matches found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchesResponse"
        "400":
          description: Invalid team ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: No matches found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/matches/seasons/{season_id}/{date}:
    get:
      tags:
        - matches
      summary: Get matches by season ID and date
      description: Retrieves all matches for a given season ID and date
      operationId: getMatchesBySeasonIdAndDate
      parameters:
        - $ref: "#/components/parameters/SeasonId"
        - $ref: "#/components/parameters/Date"
      responses:
        "200":
          description: Matches found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchesResponse"
        "400":
          description: Invalid season ID or date format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: No matches found for the given season and date
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/matches/seasons/{seasonid}:
    get:
      tags:
        - matches
      summary: Get matches by season ID
      description: Retrieves all matches for a specific season
      operationId: getMatchesBySeasonId
      parameters:
        - $ref: "#/components/parameters/SeasonId"
      responses:
        "200":
          description: Matches fetched successfully for this season
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MatchesResponse"

  /api/teamresults/:
    post:
      tags:
        - team_results
      summary: Create a new team result
      description: Creates a new team result for a season
      operationId: createTeamResults
      security:
        - bearerAuth: []
      requestBody:
        description: Information needed to create a team result
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTeamResultRequest"
      responses:
        "201":
          description: Team result created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input or team result already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team or season not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/teamresults/{id}:
    get:
      tags:
        - team_results
      summary: Get a team result by ID
      description: Retrieves a team result by its ID
      operationId: getTeamResultsById
      parameters:
        - $ref: "#/components/parameters/TeamResultId"
      responses:
        "200":
          description: Team result found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResultResponse"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team result not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - team_results
      summary: Delete a team result
      description: Deletes an existing team result by its ID
      operationId: deleteTeamResults
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/TeamResultId"
      responses:
        "200":
          description: Team result deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team result not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/teamresults/season/{season_id}:
    get:
      tags:
        - team_results
      summary: Get team results by season ID
      description: Retrieves all team results for a specific season
      operationId: getTeamResultsbySeasonId
      parameters:
        - $ref: "#/components/parameters/SeasonId"
      responses:
        "200":
          description: Team results fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResultsResponse"
        "400":
          description: Invalid season ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team results not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/teamresults/{season_id}/{team_id}:
    get:
      tags:
        - team_results
      summary: Get team result ID by season and team
      description: Retrieves the ID of a team result by season ID and team ID
      operationId: getId
      parameters:
        - $ref: "#/components/parameters/SeasonId"
        - $ref: "#/components/parameters/TeamId"
      responses:
        "200":
          description: Team result ID fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamResultIdResponse"
        "400":
          description: Invalid season_id or team_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team result not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/teamresults/{matchid}:
    put:
      tags:
        - team_results
      summary: Update team results by match
      description: Updates team results based on a match result
      operationId: updateTeamResultsByMatch
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/MatchId"
      responses:
        "200":
          description: Team results updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid match ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Match not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/rankings/{seasonid}:
    get:
      tags:
        - ranking
      summary: Get season rankings
      description: Retrieves all rankings for a specific season
      operationId: getSeasonRanking
      parameters:
        - $ref: "#/components/parameters/SeasonId"
      responses:
        "200":
          description: Season rankings fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RankingsResponse"
        "400":
          description: Invalid season ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - ranking
      summary: Update season rankings
      description: Updates or creates rankings for a specific season based on a match date
      operationId: updateRanking
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/SeasonId"
      requestBody:
        description: Information needed to update the rankings
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRankingRequest"
      responses:
        "200":
          description: Rankings updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "201":
          description: New rankings created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input, invalid ranking criteria, or no team results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Season regulation or team results not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/rankings/{team_result_id}:
    post:
      tags:
        - ranking
      summary: Create a new ranking
      description: Creates a new ranking for a team result in a season
      operationId: createRanking
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/TeamResultId"
      requestBody:
        description: Information needed to create a ranking
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRankingRequest"
      responses:
        "201":
          description: Ranking created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input or ranking already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team result not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/rankings/{id}:
    delete:
      tags:
        - ranking
      summary: Delete a ranking
      description: Deletes an existing ranking by its ID
      operationId: deleteRanking
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/RankingId"
      responses:
        "200":
          description: Ranking deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Ranking not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/seasons:
    get:
      tags:
        - seasons
      summary: Get all seasons
      description: Retrieves a list of all seasons
      operationId: getSeasons
      responses:
        "200":
          description: Seasons fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonsResponse"
    post:
      tags:
        - seasons
      summary: Create a new season
      description: Creates a new season
      operationId: createSeason
      security:
        - bearerAuth: []
      requestBody:
        description: Information needed to create a season
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSeasonRequest"
      responses:
        "201":
          description: Season created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input or season name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/seasons/{id}:
    get:
      tags:
        - seasons
      summary: Get a season by ID
      description: Retrieves a season by its ID
      operationId: getSeasonById
      parameters:
        - $ref: "#/components/parameters/SeasonId"
      responses:
        "200":
          description: Season found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonResponse"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Season not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - seasons
      summary: Update a season
      description: Updates an existing season
      operationId: updateSeason
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/SeasonId"
      requestBody:
        description: Information needed to update the season
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateSeasonRequest"
      responses:
        "200":
          description: Season updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonResponse"
        "400":
          description: Invalid input or season name already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Season not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - seasons
      summary: Delete a season
      description: Deletes an existing season by its ID
      operationId: deleteSeason
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/SeasonId"
      responses:
        "204":
          description: Season deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Season not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/seasons/name/{season_name}:
    get:
      tags:
        - seasons
      summary: Get season ID by season name
      description: Retrieves the ID of a season by its name
      operationId: getSeasonIdBySeasonName
      parameters:
        - $ref: "#/components/parameters/SeasonName"
      responses:
        "200":
          description: Season ID found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeasonIdResponse"
        "400":
          description: Invalid season name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Season not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/players:
    get:
      tags:
        - players
      summary: Get all players
      description: Retrieves a list of all players with their team information
      operationId: getPlayers
      responses:
        "200":
          description: Players fetched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayersResponse"
    post:
      tags:
        - players
      summary: Create a new player
      description: Creates a new player for a team, adhering to team regulations
      operationId: createPlayer
      security:
        - bearerAuth: []
      requestBody:
        description: Information needed to create a player
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlayerRequest"
      responses:
        "201":
          description: Player created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input, player number already exists, team has maximum players, too many foreign players, or age out of range
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Regulation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/players/{team_id}/{number}/{name_player}:
    get:
      tags:
        - players
      summary: Get a player by team ID, number, and name
      description: Retrieves a player based on the provided team ID, player number, and player name (case-insensitive)
      operationId: getPlayerByTeamIdNumberName
      parameters:
        - $ref: "#/components/parameters/TeamId"
        - $ref: "#/components/parameters/PlayerNumber"
        - $ref: "#/components/parameters/PlayerName"
      responses:
        "200":
          description: Player found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerResponse"
        "400":
          description: Invalid input parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Player not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/players/{id}:
    get:
      tags:
        - players
      summary: Get a player by ID
      description: Retrieves a player by its ID with team information
      operationId: getPlayerById
      parameters:
        - $ref: "#/components/parameters/PlayerId"
      responses:
        "200":
          description: Player found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerResponse"
        "404":
          description: Player not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - players
      summary: Update a player
      description: Updates an existing player
      operationId: updatePlayer
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PlayerId"
      requestBody:
        description: Information needed to update the player
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlayerRequest"
      responses:
        "200":
          description: Player updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input or player number already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Player not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - players
      summary: Delete a player
      description: Deletes an existing player by its ID
      operationId: deletePlayer
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PlayerId"
      responses:
        "204":
          description: Player deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Player not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/players/team/{id}:
    get:
      tags:
        - players
      summary: Get players by team ID
      description: Retrieves all players for a specific team
      operationId: getPlayersByIdTeam
      parameters:
        - $ref: "#/components/parameters/TeamId"
      responses:
        "200":
          description: Players fetched successfully for this team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayersResponse"
        "404":
          description: Team not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/player_results:
    post:
      tags:
        - playerresults
      summary: Create a new player result
      description: Creates a new player result for a specific player, season, and team
      operationId: createPlayerResults
      security:
        - bearerAuth: []
      requestBody:
        description: Information needed to create a player result
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlayerResultRequest"
      responses:
        "201":
          description: Player result created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input or player result already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Player or season not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/player_results/season/{seasonid}/{date}:
    get:
      tags:
        - playerresults
      summary: Get player results by season ID and date
      description: Retrieves the latest player results for a specific season up to a given date
      operationId: getPlayerResultbySeasonIdAndDate
      parameters:
        - name: seasonid
          in: path
          description: ID of the season (MongoDB ObjectId)
          required: true
          schema:
            type: string
            pattern: "^[0-9a-fA-F]{24}$"
            example: "507f1f77bcf86cd799439011"
        - name: date
          in: path
          description: Date to filter player results (format YYYY-MM-DD)
          required: true
          schema:
            type: string
            format: date
            example: "2023-05-06"
      responses:
        "200":
          description: Latest player results retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerResultsResponse"
        "400":
          description: Invalid season ID or date format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: No player results found for this season and date
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/player_results/player/{playerid}:
    get:
      tags:
        - playerresults
      summary: Get player result by player ID
      description: Retrieves a player result by player ID
      operationId: getPlayerResultsById
      parameters:
        - $ref: "#/components/parameters/PlayerId"
      responses:
        "200":
          description: Player result found successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerResultResponse"
        "400":
          description: Invalid player ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Player result not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/player_results/match/{matchid}:
    put:
      tags:
        - playerresults
      summary: Update player results after a match
      description: Updates player results for all players in a match based on match details
      operationId: updatePlayerResultsafterMatch
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/MatchId"
      responses:
        "200":
          description: Player results updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid match ID or match season_id is required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Match not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/player_results/{id}:
    put:
      tags:
        - playerresults
      summary: Update a player result manually
      description: Updates an existing player result with provided details
      operationId: updatePlayerResults
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PlayerResultId"
      requestBody:
        description: Information needed to update the player result
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlayerResultRequest"
      responses:
        "200":
          description: Player result updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Player result not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      tags:
        - playerresults
      summary: Delete a player result
      description: Deletes an existing player result by its ID
      operationId: deletePlayerResults
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PlayerResultId"
      responses:
        "200":
          description: Player result deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid player result ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Player result not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/player_rankings:
    post:
      tags:
        - playerranking
      summary: Create a new player ranking
      description: Creates a new player ranking for a specific season and player result
      operationId: createPlayerRankings
      security:
        - bearerAuth: []
      requestBody:
        description: Information needed to create a player ranking
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlayerRankingRequest"
      responses:
        "201":
          description: Player ranking created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid input or player ranking already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Player result not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/player_rankings/season/{seasonid}:
    get:
      tags:
        - playerranking
      summary: Get player rankings by season ID and date
      description: Retrieves the latest player rankings for a specific season up to a given date
      operationId: getPlayerRankingsbySeasonIdAndDate
      parameters:
        - $ref: "#/components/parameters/SeasonId"
      requestBody:
        description: Date to filter player rankings
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterDateRequest"
      responses:
        "200":
          description: Latest player rankings retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerRankingsResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: No player rankings found for this season and date
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/player_rankings/match/{matchid}:
    put:
      tags:
        - playerranking
      summary: Update player rankings after a match
      description: Updates player rankings for a specific season based on match results
      operationId: updatePlayerRankingsafterMatch
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/MatchId"
      responses:
        "200":
          description: Player rankings updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdatePlayerRankingsResponse"
        "400":
          description: Invalid match ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Match or player results not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/player_rankings/{id}:
    delete:
      tags:
        - playerranking
      summary: Delete a player ranking
      description: Deletes an existing player ranking by its ID
      operationId: deletePlayerRankings
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/PlayerRankingId"
      responses:
        "200":
          description: Player ranking deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          description: Invalid player ranking ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Player ranking not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    RegulationId:
      name: id
      in: path
      required: true
      schema:
        type: string
      example: "67d0ec1a412c1edc00d2117b"
    SeasonId:
      name: season_id
      in: path
      required: true
      schema:
        type: string
      example: "67d0ec1a412c1edc00d2117c"
    RegulationName:
      name: regulation_name
      in: path
      required: true
      schema:
        type: string
        enum:
          - "Age Regulation"
          - "Match Rules"
          - "Goal Rules"
          - "Ranking Rules"
      example: "Age Regulation"
    TeamName:
      name: team_name
      in: path
      required: true
      schema:
        type: string
      example: "Real Madrid"
    TeamId:
      name: id
      in: path
      required: true
      schema:
        type: string
      example: "67d0ec1a412c1edc00d2117b"
    MatchId:
      name: id
      in: path
      required: true
      schema:
        type: string
      example: "67d0ec1a412c1edc00d2117b"
    Date:
      name: date
      in: path
      required: true
      schema:
        type: string
        format: date
      example: "2025-01-10"
    TeamResultId:
      name: id
      in: path
      required: true
      schema:
        type: string
      example: "67d0ec1a412c1edc00d2117b"
    RankingId:
      name: id
      in: path
      required: true
      schema:
        type: string
      example: "67d0ec1a412c1edc00d2117b"
    SeasonName:
      name: season_name
      in: path
      required: true
      schema:
        type: string
      example: "Season 2025"
    PlayerId:
      name: id
      in: path
      required: true
      schema:
        type: string
      example: "67d0ec1a412c1edc00d2117f"
    PlayerNumber:
      name: number
      in: path
      required: true
      schema:
        type: integer
      example: 8
    PlayerName:
      name: name_player
      in: path
      required: true
      schema:
        type: string
      example: "Truong Hoang Khiem"
    PlayerResultId:
      name: id
      in: path
      required: true
      schema:
        type: string
      example: "67d0ec1a412c1edc00d21180"
    PlayerRankingId:
      name: id
      in: path
      schema:
        type: string
      example: "67d0ec1a412c1edc00d21182"

  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Invalid email address"
      required:
        - status
        - message

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Operation successful"
        data:
          type: object
          nullable: true
          example: null
      required:
        - status
        - message

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: "testuser2@example.com"
        password:
          type: string
          example: "1234567"
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Login successful"
        data:
          type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - status
        - message
        - data

    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          example: "testuser"
        email:
          type: string
          example: "testuser@example.com"
        password:
          type: string
          example: "1234567"
      required:
        - username
        - email
        - password

    RegisterResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Created user successfully"
        data:
          type: object
          properties:
            userId:
              type: string
              example: "67d0ec1a412c1edc00d2117b"
      required:
        - status
        - message
        - data

    UpdatePasswordRequest:
      type: object
      properties:
        email:
          type: string
          example: "testuser@example.com"
        oldpassword:
          type: string
          example: "1234567"
        newpassword:
          type: string
          example: "newpass123"
      required:
        - email
        - oldpassword
        - newpassword

    UpdateUsernameRequest:
      type: object
      properties:
        email:
          type: string
          example: "testuser@example.com"
        Inputpassword:
          type: string
          example: "1234567"
        newusername:
          type: string
          example: "newusername"
      required:
        - email
        - Inputpassword
        - newusername

    DeleteUserRequest:
      type: object
      properties:
        email:
          type: string
          example: "testuser@example.com"
        password:
          type: string
          example: "1234567"
      required:
        - email
        - password

    Regulation:
      type: object
      properties:
        _id:
          type: string
          example: "67d0ec1a412c1edc00d2117b"
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        regulation_name:
          type: string
          example: "Age Regulation"
        rules:
          type: object
          example:
            minAge: 18
            maxAge: 40
            minPlayersPerTeam: 11
            maxPlayersPerTeam: 20
            maxForeignPlayers: 5
        createdAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
      required:
        - _id
        - season_id
        - regulation_name
        - rules
        - createdAt
        - updatedAt

    RegulationsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched regulations successfully"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Regulation"
      required:
        - status
        - message
        - data

    CreateRegulationRequest:
      type: object
      properties:
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        regulation_name:
          type: string
          enum:
            - "Age Regulation"
            - "Match Rules"
            - "Goal Rules"
            - "Ranking Rules"
          example: "Age Regulation"
        rules:
          type: object
          example:
            minAge: 18
            maxAge: 40
            minPlayersPerTeam: 11
            maxPlayersPerTeam: 20
            maxForeignPlayers: 5
      required:
        - season_id
        - regulation_name
        - rules

    RegulationResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Regulation found successfully"
        data:
          $ref: "#/components/schemas/Regulation"
      required:
        - status
        - message
        - data

    UpdateRegulationRequest:
      type: object
      properties:
        rules:
          type: object
          example:
            minAge: 18
            maxAge: 40
            minPlayersPerTeam: 11
            maxPlayersPerTeam: 20
            maxForeignPlayers: 5
      required:
        - rules

    RegulationIdResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Regulation id found"
        data:
          type: string
          example: "67d0ec1a412c1edc00d2117b"
      required:
        - status
        - message
        - data

    Team:
      type: object
      properties:
        _id:
          type: string
          example: "67d0ec1a412c1edc00d2117b"
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        team_name:
          type: string
          example: "Team A"
        stadium:
          type: string
          example: "Stadium A"
        coach:
          type: string
          example: "Coach A"
        logo:
          type: string
          example: "https://example.com/logo.png"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
      required:
        - _id
        - season_id
        - team_name
        - stadium
        - coach
        - logo
        - createdAt
        - updatedAt

    TeamResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched team successfully"
        data:
          $ref: "#/components/schemas/Team"
      required:
        - status
        - message
        - data

    TeamsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched teams successfully"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Team"
      required:
        - status
        - message
        - data

    CreateTeamRequest:
      type: object
      properties:
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        team_name:
          type: string
          example: "Team A"
        stadium:
          type: string
          example: "Stadium A"
        coach:
          type: string
          example: "Coach A"
        logo:
          type: string
          example: "https://example.com/logo.png"
      required:
        - season_id
        - team_name
        - stadium
        - coach
        - logo

    CreateTeamResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Created team successfully"
        data:
          type: object
          properties:
            id:
              type: string
              example: "67d0ec1a412c1edc00d2117b"
      required:
        - status
        - message
        - data

    UpdateTeamRequest:
      type: object
      properties:
        team_name:
          type: string
          example: "Team A Updated"
        stadium:
          type: string
          example: "Stadium A Updated"
        coach:
          type: string
          example: "Coach A Updated"
        logo:
          type: string
          example: "https://example.com/logo-updated.png"

    GoalDetail:
      type: object
      properties:
        player_id:
          type: string
          example: "67d0ec1a412c1edc00d2117f"
        team_id:
          type: string
          example: "67d0ec1a412c1edc00d2117d"
        minute:
          type: number
          example: 45
        goalType:
          type: string
          example: "normal"
      required:
        - player_id
        - team_id
        - minute
        - goalType

    Match:
      type: object
      properties:
        _id:
          type: string
          example: "67d0ec1a412c1edc00d2117b"
        season_id:
          type: object
          properties:
            _id:
              type: string
              example: "67d0ec1a412c1edc00d2117c"
            season_name:
              type: string
              example: "Season 2025"
        team1:
          type: object
          properties:
            _id:
              type: string
              example: "67d0ec1a412c1edc00d2117d"
            team_name:
              type: string
              example: "Team A"
        team2:
          type: object
          properties:
            _id:
              type: string
              example: "67d0ec1a412c1edc00d2117e"
            team_name:
              type: string
              example: "Team B"
        date:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
        stadium:
          type: string
          example: "Stadium A"
        score:
          type: string
          example: "0-0"
        goalDetails:
          type: array
          items:
            $ref: "#/components/schemas/GoalDetail"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
      required:
        - _id
        - season_id
        - team1
        - team2
        - date
        - stadium
        - score
        - goalDetails
        - createdAt
        - updatedAt

    MatchesResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched all matches successfully"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Match"
      required:
        - status
        - message
        - data

    MatchResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Match found successfully"
        data:
          $ref: "#/components/schemas/Match"
      required:
        - status
        - message
        - data

    CreateMatchRequest:
      type: object
      properties:
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        matchperday:
          type: number
          example: 2
      required:
        - season_id
        - matchperday

    UpdateMatchRequest:
      type: object
      properties:
        score:
          type: string
          example: "2-1"
        goalDetails:
          type: array
          items:
            $ref: "#/components/schemas/GoalDetail"

    TeamResult:
      type: object
      properties:
        _id:
          type: string
          example: "67d0ec1a412c1edc00d2117b"
        team_id:
          type: string
          example: "67d0ec1a412c1edc00d2117d"
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        matchplayed:
          type: number
          example: 0
        wins:
          type: number
          example: 0
        draws:
          type: number
          example: 0
        losses:
          type: number
          example: 0
        goalsFor:
          type: number
          example: 0
        goalsAgainst:
          type: number
          example: 0
        goalsDifference:
          type: number
          example: 0
        points:
          type: number
          example: 0
        goalsForAway:
          type: number
          example: 0
        headToHeadPoints:
          type: object
          additionalProperties:
            type: number
          example: {}
        date:
          type: string
          format: date-time
          example: "2025-04-08T00:00:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
      required:
        - _id
        - team_id
        - season_id
        - matchplayed
        - wins
        - draws
        - losses
        - goalsFor
        - goalsAgainst
        - goalsDifference
        - points
        - goalsForAway
        - headToHeadPoints
        - date
        - createdAt
        - updatedAt

    TeamResultResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Team result found successfully"
        data:
          $ref: "#/components/schemas/TeamResult"
      required:
        - status
        - message
        - data

    TeamResultsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched team results successfully"
        data:
          type: array
          items:
            $ref: "#/components/schemas/TeamResult"
      required:
        - status
        - message
        - data

    CreateTeamResultRequest:
      type: object
      properties:
        team_id:
          type: string
          example: "67d0ec1a412c1edc00d2117d"
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
      required:
        - team_id
        - season_id

    TeamResultIdResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched team result ID successfully"
        data:
          type: string
          example: "67d0ec1a412c1edc00d2117b"
      required:
        - status
        - message
        - data

    Ranking:
      type: object
      properties:
        _id:
          type: string
          example: "67d0ec1a412c1edc00d2117b"
        team_result_id:
          type: string
          example: "67d0ec1a412c1edc00d2117d"
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        rank:
          type: number
          example: 1
        date:
          type: string
          format: date-time
          example: "2025-04-08T00:00:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
      required:
        - _id
        - team_result_id
        - season_id
        - rank
        - date
        - createdAt
        - updatedAt

    RankingsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched season rankings successfully"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Ranking"
      required:
        - status
        - message
        - data

    UpdateRankingRequest:
      type: object
      properties:
        match_date:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
      required:
        - match_date

    CreateRankingRequest:
      type: object
      properties:
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
      required:
        - season_id

    Season:
      type: object
      properties:
        _id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        season_name:
          type: string
          example: "Season 2025"
        start_date:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          example: "2025-12-31T23:59:59Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
      required:
        - _id
        - season_name
        - start_date
        - end_date
        - createdAt
        - updatedAt

    SeasonsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched seasons successfully"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Season"
      required:
        - status
        - message
        - data

    SeasonResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Season found successfully"
        data:
          $ref: "#/components/schemas/Season"
      required:
        - status
        - message
        - data

    CreateSeasonRequest:
      type: object
      properties:
        season_name:
          type: string
          example: "Season 2025"
        start_date:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          example: "2025-12-31T23:59:59Z"
      required:
        - season_name
        - start_date
        - end_date

    UpdateSeasonRequest:
      type: object
      properties:
        season_name:
          type: string
          example: "Season 2025 Updated"
        start_date:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00Z"
        end_date:
          type: string
          format: date-time
          example: "2025-12-31T23:59:59Z"

    SeasonIdResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Season ID found successfully"
        data:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
      required:
        - status
        - message
        - data

    Player:
      type: object
      properties:
        _id:
          type: string
          example: "67d0ec1a412c1edc00d2117f"
        team_id:
          type: string
          example: "67d0ec1a412c1edc00d2117d"
        name:
          type: string
          example: "John Doe"
        number:
          type: integer
          example: 10
        position:
          type: string
          example: "Forward"
        nationality:
          type: string
          example: "USA"
        dateOfBirth:
          type: string
          format: date
          example: "1995-05-15"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
      required:
        - _id
        - team_id
        - name
        - number
        - position
        - nationality
        - dateOfBirth
        - createdAt
        - updatedAt

    PlayersResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched players successfully"
        data:
          type: array
          items:
            $ref: "#/components/schemas/Player"
      required:
        - status
        - message
        - data

    PlayerResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Player found successfully"
        data:
          $ref: "#/components/schemas/Player"
      required:
        - status
        - message
        - data

    CreatePlayerRequest:
      type: object
      properties:
        team_id:
          type: string
          example: "67d0ec1a412c1edc00d2117d"
        name:
          type: string
          example: "John Doe"
        number:
          type: integer
          example: 10
        position:
          type: string
          example: "Forward"
        nationality:
          type: string
          example: "USA"
        dateOfBirth:
          type: string
          format: date
          example: "1995-05-15"
      required:
        - team_id
        - name
        - number
        - position
        - nationality
        - dateOfBirth

    UpdatePlayerRequest:
      type: object
      properties:
        name:
          type: string
          example: "John Doe Updated"
        number:
          type: integer
          example: 11
        position:
          type: string
          example: "Midfielder"
        nationality:
          type: string
          example: "USA"
        dateOfBirth:
          type: string
          format: date
          example: "1995-05-15"

    PlayerResult:
      type: object
      properties:
        _id:
          type: string
          example: "67d0ec1a412c1edc00d21180"
        player_id:
          type: string
          example: "67d0ec1a412c1edc00d2117f"
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        team_id:
          type: string
          example: "67d0ec1a412c1edc00d2117d"
        matchesPlayed:
          type: integer
          example: 5
        goals:
          type: integer
          example: 3
        assists:
          type: integer
          example: 2
        yellowCards:
          type: integer
          example: 1
        redCards:
          type: integer
          example: 0
        date:
          type: string
          format: date-time
          example: "2025-04-08T00:00:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
      required:
        - _id
        - player_id
        - season_id
        - team_id
        - matchesPlayed
        - goals
        - assists
        - yellowCards
        - redCards
        - date
        - createdAt
        - updatedAt

    PlayerResultsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched player results successfully"
        data:
          type: array
          items:
            $ref: "#/components/schemas/PlayerResult"
      required:
        - status
        - message
        - data

    PlayerResultResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Player result found successfully"
        data:
          $ref: "#/components/schemas/PlayerResult"
      required:
        - status
        - message
        - data

    CreatePlayerResultRequest:
      type: object
      properties:
        player_id:
          type: string
          example: "67d0ec1a412c1edc00d2117f"
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        team_id:
          type: string
          example: "67d0ec1a412c1edc00d2117d"
      required:
        - player_id
        - season_id
        - team_id

    UpdatePlayerResultRequest:
      type: object
      properties:
        matchesPlayed:
          type: integer
          example: 6
        goals:
          type: integer
          example: 4
        assists:
          type: integer
          example: 3
        yellowCards:
          type: integer
          example: 2
        redCards:
          type: integer
          example: 0
        date:
          type: string
          format: date-time
          example: "2025-04-08T00:00:00Z"

    PlayerRanking:
      type: object
      properties:
        _id:
          type: string
          example: "67d0ec1a412c1edc00d21182"
        player_result_id:
          type: string
          example: "67d0ec1a412c1edc00d21180"
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        rank:
          type: integer
          example: 1
        date:
          type: string
          format: date-time
          example: "2025-04-08T00:00:00Z"
        createdAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2025-04-08T12:00:00Z"
      required:
        - _id
        - player_result_id
        - season_id
        - rank
        - date
        - createdAt
        - updatedAt

    PlayerRankingsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Fetched player rankings successfully"
        data:
          type: array
          items:
            $ref: "#/components/schemas/PlayerRanking"
      required:
        - status
        - message
        - data

    CreatePlayerRankingRequest:
      type: object
      properties:
        player_result_id:
          type: string
          example: "67d0ec1a412c1edc00d21180"
        season_id:
          type: string
          example: "67d0ec1a412c1edc00d2117c"
        rank:
          type: integer
          example: 1
        date:
          type: string
          format: date-time
          example: "2025-04-08T00:00:00Z"
      required:
        - player_result_id
        - season_id
        - rank
        - date

    UpdatePlayerRankingsResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Player rankings updated successfully"
        data:
          type: object
          nullable: true
          example: null
      required:
        - status
        - message

    FilterDateRequest:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: "2025-04-08T00:00:00Z"
      required:
        - date

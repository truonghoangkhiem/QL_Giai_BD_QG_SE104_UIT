import React, { useState, useEffect } from 'react'; // Th√™m useEffect
import axios from 'axios'; // Th√™m axios
import Regulations from '../components/Regulations';
import RegulationForm from '../components/RegulationForm';

const RegulationsPage = ({ token }) => {
    const [showForm, setShowForm] = useState(false);
    const [editingRegulation, setEditingRegulation] = useState(null);
    // B·ªè regulations state ·ªü ƒë√¢y v√¨ Regulations component t·ª± qu·∫£n l√Ω
    // const [regulations, setRegulations] = useState([]);

    // State cho seasons v√† selectedSeasonId s·∫Ω ƒë∆∞·ª£c qu·∫£n l√Ω trong RegulationsPage
    // ƒë·ªÉ truy·ªÅn xu·ªëng cho c·∫£ Regulations (hi·ªÉn th·ªã) v√† RegulationForm (th√™m/s·ª≠a)
    const [seasons, setSeasons] = useState([]);
    const [selectedSeasonId, setSelectedSeasonId] = useState('');

    useEffect(() => {
        const fetchSeasons = async () => {
            try {
                const seasonsRes = await axios.get('http://localhost:5000/api/seasons');
                setSeasons(seasonsRes.data.data);
                if (seasonsRes.data.data.length > 0) {
                    setSelectedSeasonId(seasonsRes.data.data[0]._id); // Ch·ªçn m√πa gi·∫£i ƒë·∫ßu ti√™n m·∫∑c ƒë·ªãnh
                }
            } catch (err) {
                console.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√πa gi·∫£i', err);
                // C√≥ th·ªÉ th√™m state error ·ªü ƒë√¢y ƒë·ªÉ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
            }
        };
        fetchSeasons();
    }, []);

    // Callback ƒë·ªÉ refresh l·∫°i danh s√°ch regulations khi form ƒë∆∞·ª£c submit th√†nh c√¥ng
    // Component Regulations s·∫Ω t·ª± fetch l·∫°i khi selectedSeasonId thay ƒë·ªïi (ho·∫∑c c√≥ th·ªÉ th√™m 1 state trigger)
    // Tuy nhi√™n, n·∫øu RegulationForm th√™m m·ªõi/s·ª≠a ƒë·ªïi, ch√∫ng ta c·∫ßn 1 c√°ch ƒë·ªÉ Regulations bi·∫øt v√† fetch l·∫°i.
    // C√°ch ƒë∆°n gi·∫£n l√† truy·ªÅn m·ªôt key thay ƒë·ªïi ho·∫∑c m·ªôt callback.
    // Hi·ªán t·∫°i, Regulations ƒë√£ c√≥ useEffect theo d√µi selectedSeasonId,
    // n√™n n·∫øu kh√¥ng ƒë·ªïi m√πa gi·∫£i th√¨ n√≥ kh√¥ng fetch l·∫°i.
    // Ch√∫ng ta c√≥ th·ªÉ th√™m m·ªôt state `refreshKey` ƒë·ªÉ trigger vi·ªác fetch l·∫°i trong Regulations
    const [refreshKey, setRefreshKey] = useState(0);
    const handleFormSuccess = () => {
        setShowForm(false);
        setEditingRegulation(null);
        setRefreshKey(prevKey => prevKey + 1); // Thay ƒë·ªïi key ƒë·ªÉ trigger fetch l·∫°i trong Regulations
    };


    return (
        <div className="min-h-screen bg-gray-100 font-sans"
            style={{
                backgroundImage: 'url(https://i.pinimg.com/736x/cd/07/2b/cd072bdf8a259e2d064fbb291a4456e8.jpg)', // Background cho to√†n trang
                backgroundSize: 'cover',
                backgroundPosition: 'center',
                backgroundAttachment: 'scroll', // ƒê·ªÉ background c·ªë ƒë·ªãnh khi cu·ªôn
            }}>
            <div className="container mx-auto p-4 md:p-6">
                {showForm ? (
                    <RegulationForm
                        editingRegulation={editingRegulation}
                        setEditingRegulation={setEditingRegulation} // Gi·ªØ l·∫°i ƒë·ªÉ form bi·∫øt ƒëang s·ª≠a g√¨
                        setShowForm={setShowForm} // ƒê·ªÉ ƒë√≥ng form
                        // setRegulations prop kh√¥ng c√≤n c·∫ßn thi·∫øt n·∫øu Regulations t·ª± fetch
                        token={token}
                        seasons={seasons} // Truy·ªÅn danh s√°ch m√πa gi·∫£i cho form
                        initialSelectedSeasonId={editingRegulation ? editingRegulation.season_id : selectedSeasonId} // M√πa gi·∫£i cho quy ƒë·ªãnh ƒëang s·ª≠a ho·∫∑c m√πa ƒëang ch·ªçn
                        onSuccess={handleFormSuccess} // Callback khi form th√†nh c√¥ng
                    />
                ) : (
                    // Container ch√≠nh cho ph·∫ßn hi·ªÉn th·ªã danh s√°ch (gi·ªëng SeasonsPage)
                    <div className="bg-white/90 rounded-lg shadow-xl overflow-hidden">
                        {/* Header Section - Ti√™u ƒë·ªÅ v√† n√∫t Th√™m */}
                        <div className="flex flex-col sm:flex-row justify-between items-center px-6 py-5 border-b border-gray-200"
                            style={{ // C√≥ th·ªÉ th√™m background ri√™ng cho header n√†y n·∫øu mu·ªën
                                // backgroundImage: 'url(link_anh_nen_header_neu_co)',
                                // backgroundSize: 'cover',
                                // backgroundPosition: 'center',
                            }}
                        >
                            <h1 className="text-2xl sm:text-3xl font-bold text-gray-800 mb-3 sm:mb-0">
                                üìúQu·∫£n l√Ω Quy ƒë·ªãnh Gi·∫£i ƒë·∫•u
                            </h1>
                            {token && (
                                <button
                                    onClick={() => { setEditingRegulation(null); setShowForm(true); }}
                                    className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition-colors duration-200 w-full sm:w-auto"
                                >
                                    Th√™m quy ƒë·ªãnh
                                </button>
                            )}
                        </div>

                        {/* Ph·∫ßn ch·ªçn m√πa gi·∫£i v√† danh s√°ch quy ƒë·ªãnh */}
                        <div className="p-4 md:p-6">
                            {/* Ph·∫ßn ch·ªçn m√πa gi·∫£i gi·ªù s·∫Ω n·∫±m ·ªü ƒë√¢y, b√™n trong RegulationsPage */}
                            <div className="mb-6 flex justify-center sm:justify-start">
                                <div className="w-full sm:w-auto sm:max-w-xs md:max-w-sm">
                                    <label htmlFor="page-season-select" className="block text-sm font-medium text-gray-700 mb-1">
                                        Xem quy ƒë·ªãnh cho m√πa gi·∫£i:
                                    </label>
                                    <select
                                        id="page-season-select"
                                        value={selectedSeasonId}
                                        onChange={(e) => setSelectedSeasonId(e.target.value)}
                                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 shadow-sm"
                                    >
                                        <option value="">Ch·ªçn m√πa gi·∫£i</option>
                                        {seasons.map((season) => (
                                            <option key={season._id} value={season._id}>
                                                {season.season_name}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                            </div>

                            <Regulations
                                // regulations v√† setRegulations ƒë∆∞·ª£c qu·∫£n l√Ω b√™n trong Regulations component d·ª±a tr√™n selectedSeasonId v√† refreshKey
                                setEditingRegulation={setEditingRegulation}
                                setShowForm={setShowForm}
                                token={token}
                                selectedSeasonId={selectedSeasonId} // Truy·ªÅn m√πa gi·∫£i ƒë√£ ch·ªçn xu·ªëng
                                seasons={seasons} // Truy·ªÅn danh s√°ch m√πa gi·∫£i xu·ªëng (ƒë·ªÉ l·∫•y t√™n m√πa gi·∫£i)
                                refreshKey={refreshKey} // Truy·ªÅn key ƒë·ªÉ trigger fetch l·∫°i
                            />
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default RegulationsPage;